- name: setup facts for nginx reverse proxies
  include_tasks: nginx.yml
  with_items:
    - "{{ hub_sites }}"
  loop_control:
    loop_var: hub_site

- debug:
    var: nginx_vhosts

- name: install deployment and tooling scripts
  template:
    src: "{{ item }}"
    dest: /usr/local/bin/{{ item }}
    mode: 0755
    owner: root
    group: root
  with_items:
    - hub-update
    - hub-deploy
    - hub-drush
  notify:
    - redeploy containers

- name: generate some local secrets
  shell: |
    tr -d -c "a-zA-Z0-9" < /dev/urandom | head -c 20 \
      > /etc/docker-decomposed-secrets-{{ item }}
  args:
    creates: /etc/docker-decomposed-secrets-{{ item }}
  with_items:
    - MYSQL_ROOT_PASSWORD
    - MYSQL_PASSWORD

- name: keep secrets relatively secret
  file:
    path: /etc/docker-decomposed-secrets-{{ item }}
    owner: root
    group: root
    mode: 0400
  with_items:
    - MYSQL_ROOT_PASSWORD
    - MYSQL_PASSWORD

- name: setup secrets file for decomposed
  copy:
    content: |
      export MYSQL_USER=hubdb_user
      export MYSQL_ROOT_PASSWORD=$(cat /etc/docker-decomposed-secrets-MYSQL_ROOT_PASSWORD)
      export MYSQL_PASSWORD=$(cat /etc/docker-decomposed-secrets-MYSQL_PASSWORD)
      export PIWIK_URI=//example.com
      export DRUPAL_URL=https://{{ hub_backend_host }}
      export MATOMO_URL=//digital-hub-stage.hmpps.dsd.io
      export APP_NAME="HMP Berwyn"
    dest: /etc/docker-decomposed-secrets.sh
    mode: 0644
    owner: root
    group: root
  notify:
    - redeploy containers

- name: Setup directory and permissions for content folder
  file:
    path: /content/moj_dhub_prod001_app/usr/share/nginx/html/moj_be/sites/default/files
    owner: hub
    group: hub
    mode: 0755
    state: directory

- name: install docker-py to allow ansible to docker
  apt:
    name: python-docker

- name: enable docker live-restore
  copy:
    content: |
      {"live-restore": true}
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: 0644
  notify:
    - reload docker

- name: docker pull images
  docker_image:
    name: "{{ item.image }}"
    tag: latest
  with_items:
    - "{{ hub_containers }}"
  notify:
    - redeploy containers

- name: docker pull drush
  docker_image:
    name: drupaldocker/drush
    tag: latest
